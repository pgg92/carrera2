1. (F)
Por todos los objetos de la gerarquia

2. (F)
No se puede acceder al implicito, por parámetro si

3. (V)
No hay objeto receptor del mensaje

4. (V)
No hay instancia en una operacion de clase

5. (F)
Constructor copia solo por referencia

6. (V)
Porque es siempre asi

7. (V)
Aprender

8. (F)
Faltan metodos por defecto solo esta el constructor

9. (F)
Falsa por clone()

10. (F)
falta default (la de paquete)

11. (F)
shallow copia (apuntar a algo que ya existe), copia superficial (serviria para una asociacionl o agregacion)
la copia profunda es para composicion (duplicar objeto)

12. (F)
no existe constructor copia por defecto en java

13. (F)
no existe clone en c++

14. (V)


15. (F)


16. (V)


17. (V)


18. (F)
Primero se construye el contenedor y despues el contenido

19. (V)  IMPORTANTE

20. (F)
si el tipo de herencia es privada o protegida la visibilidad del herado
no es visible desde main

21. (F)

22. (V)

23. (F)

24. (V)

25. (V)

26. (V)

27. (V)

28. (V)

29. (F)
la unica relacion de es la herencia

30. () JOSE NO TIENE NI PUTA IDEA

31. (F)
la agregacion es unidireccional

32. (V)
porque es atributa de clase

33. (V)
la 32 y 33 son deficinones de acceso

34. (V) JOSE SE RAYA
en c++ si y java si

35. (F)
solo admite modificadores de ambito

36. (V)

37. (F)
los metodos abstractos no pueden tener implementacion en java

38. (F)
El metodo clone() devuelve object, es necesario hacer un downcasting

39. (F)
Puedes definirla y dejarla

40. (F)

41. (F)
No decide,  la cardinalidad de las partes no decide. 
El hecho de tener una o varias partes del mismo objeto

42. (V)

43. (F)
porque no tienen parametros (solo para c++)

44. (F)
puede sobreescribir los metodos

45. (F)
solo existe en los metodos de instacion no en los metodos de clase

46. (V)

47. (V)

48. (F) NO APRENDER

49. (F)

50. (F) NO APRENDER

51. (V) 
"EL NOMBRE DEL METODO" depende de las transparencias

52. (V)
coercion = conversion implicita
conversion = conversion explicita

53. ()
this -> variable polimorfica


=======================================>PREGUNTAS GENERACIDAD

54. (f)
si que se puede
55. (f)
si si lo instacio


56. (F)
nos permiten separar el codigo, no mezclarlo

57. (F)
si pueden y ademas el orden de los bloques catch es importante

58. (F)
Aprender

59. (F)
tienen que diferir en el tipo, numero y/o orden de los argumentos,
pudiendo diferir en el tipo devuelto (aunque esto ultimo no es necesario)

60. (F)
conque difiera en uno de ellos ya es una sobrecarga

61. (V)

62. (F)

63. (F)
eso es de sobreescritura

64. (V)

65. (V)

66. (F)

67. (F)

68. (V)

69. (F)

70. (F)
a las variable privadas no se puede accder

71. (V)
es la deficion de diagrama de clases

72. (V)


73. ()  -> LAS CRC NO SE HAN DADO ESTE AÑO


=====================> PREGUNTAS EXCEPCIONES

74. (f)
si se pueden anidar

75. (V)

76. (F)

77. (INCOMPLETA)

78. (V)
no puedes especificar excepciones que no etan en la clase base

79. (F)
no puedes reducir la visibilidad, solo ampliarla

80. (F)
la redefinicion tambien existe

81. (V)
no se hara la herencia de implementacion

82. (V)


83. (F)

84. (F)
son de implementacion

====================> constructores

85. (V)

86. (V)

87. (F)
super.parametro

88. (F)
this(parametros)

89. (F)

90. (F)

91. (V)

92. (V)

93. (V)

94. (V)

95. (V)

96. (V) PREGUNTA IMPORTANTE

97. (v) SON LOS TIPOS DE HERENCIA (NO SE SI ENTRA)

98. (V)

99. (V)

100. (V)

101. (V)

102. (V)

103. (f) ESTA ES UNA PARRA, POR SI ACASO SALE
si se consideran tipos distintos

104. (V) FOTO DEL GRUPO 4 ENERO
Si devuelves un tipo devuelto pero se trata de un derivado si que es correcto

105. () ESTO NO LO VAN A PREGUTAR

---------------------- no aprenderlas, son demasiados especificas
106. (F) 
es al rebes

107. (V)

108. (V)
-------------------------

109. (V)
metodo final = metodo que no se puede sobreescribir
no ecisten los metodos final abstract

110. (V)

111. (V)
si se puede una clase final
FOTO

112. (V)

113. (V)

114. (V)

115. (F)
java solo dinamico

116. (F)
en tiempo de ejecucion

117. (F)
seguro = que no de excepcion

118. (V)

==================> preguntas de string 
119. (V)

120. (F) FOTO DE GRUPO

==================> transparencias de frameworks
APRENDER QUE ES UN FAMEWORK Y DISTINGUIRLO DE UNA LIBRERIA

famebork -> te dice que tiene que hacer cada metodo pero no como lo hace
			conjunto de interfaces o clases abstractas
libreria -> 


lo que esta en trozos = famework
lo que esta entero = libreria

libreias y toolkids jdk
jdbc y que es un framework
tratamiento xml tambien
logging
hibernate es un modelo de base de datos

121. V

122. F es de c+++

123. V
en la de claracion y en el constructor

124. F
solo en la declaracion

125. F

126. F
desde el mismo paquete y de fuera del pauqete desde las derivadas

127. F
En c++ tambien son accesibles por las clases y funciones amigas

128. V

129. V

130. F
es gerarquico
merge es de java

131. V
esta es solo de c++

132. V

============> pregutnas polimorfismo
133. F
es sobreescritorua no sobrecarga

134. V

135. F
la parte derecha de la signautra es el tipo devuelto

int f(int char)
	int x char => int

136. F
int + char implicitamente no se sobrecarga char + int,
me tocaria hacer dos funciones de sobrecarga

137. V

138. F

==============> preguntas raras
139. F  PREGUNTA NAZI APRENDER PENSAR EN T

140. V

141. V

142. F
es un framework

143. F
son clases abastracacas framwoeks

144. F
esta ya son librerias los implementas

145. V

146. F
si son librerias no hay que sobreecribiri nada 

147 V

148 F

149 V





