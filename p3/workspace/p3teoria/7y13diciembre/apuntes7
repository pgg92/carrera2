 /* 7 diciembre */

COMPOSICION:
	DESTRUIR ALGO Y SE DESTRUYEN SUS PARTES:
	CREAR EL TODO CREA LAS PARTES
	UNA PLATA SOLO PUEDE PERTENECER A UN HOTEL

UNIDIRECCIONAL:
BIDIRECCIONAL:

UNARIA: objetos de la misma clase se relacionan
		personas que se relacionan para formar un grupo


CREAACION: si un medico muere no se tiene que matar al paciente

ASIMÃ‰TRICA (unidireccional): hotel se compone de plantas pero no al contrario.


 ** relacion de uso: aprender los 3 casos ** 
 ** las 3 primeras preguntas son las mas importantes **
 ** no aprender nombre de las multiplicidades **

 ==> RELACIONES (esquemas uml) EN JAVA <==

 
 --------> relaciones (1) <-----------
 
class A{} 
class B{}
class C{}
class D{}
class E{ public E(E o){} }
class F{ public F(F e){} }
class H(  ){}
// la clase a siempre tiene un b y siempre tiene un c 
public  A{
	public ArrayList<H> eles;
	public B = new B(); // todo objeto A tiene un B
	public C c; // 
	public D d; // puedo tener un A que no tiene D
	public E e;
	Public A(){ // todo objeto de tipo A aparece con un C
		c = new C();
		efes = new ArrayList<F>();
		eles = new ArrayList<H>();
		
	}
	
	public void setD(D unD){
	d = unD;
	}
	public void setE(E unE){
		e = new E(unE);
	}
	
	public void addF(f unF){
		if(efes.size() <= 3){
			efes.add(new F(unF));
		}
	}
	
	public void addH(H e){
		eles.add(e);
	}
}

public class relaciones {

}


 --> HERENCIA(1) <--
 [ DIBUJO ]
 estatica/dinamica -> un objeto puede cambiar de tipo. No hay ningun lenguaje que lo permita.
 completa/incompleta (total / disjunta, en dbd)


 
 // OTRA PREGUNTA DE EXAMEN
 // singelton -> constructor privado solo permite una instancia
 public class sola{
	private static sola s = null;
	private sola (){}
	
	public static sola get(){
		if( s == null){}
			s = new sola();
		}
		return s;
	}
 }

// HERENCIA MULTIPLE

	// los interfaces no puede tener ningun
	// metodo implementado

	interfave B{}
	interface C{}

	//herencia multiple de interfaz
	// no heredo implementacion ni de B ni de C
	class A implements B, C {}
 
	class A extends A{}

	//una clase solo puede heredar de otra clase
	// pero puede implementar varias interfaces
	
	// una interfaz no puede heredar de clase
	// ni implementar interfaces pero puede
	// heredar de varias interfaces
	
	
	CLASS b{}
	// herencia multiple de clase que pueden
	// tener implementacion no se permite
	// class T extends A, B{}
 
 
 
 
 