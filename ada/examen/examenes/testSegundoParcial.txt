Mochila 
	Discreta
		No da optima por voraz.
	Continua
		Da optima por voraz, criterio v/p.

Prim, kruskal.
	Arbol de cobertura de coste minimo de un grafo conexo.
	Son dos algoritmos voraces.

Voraz
	Ordenacion de los elementos n· log n
	Y luego tomo n decisiones cogiendo siempre el siguiente que se pueda tomar.

	2 3 1 3 4 5 10
	
	ordenandolos
	10 5 4 3 3 2 1 nlogn
	x          x   n     => n log n (recorrer el vector ordenado de izquierda a derecha)

	no ordeno
	2 3 1 3 4 5 10
	             x	n
	          -     n
				......
						n² (buscar n veces el mayor elemento en un vector)

T(n) = T(n-1) + T(n-2) .... T(0) 		no es una ecuacion de recurrencia porque las llamadas
										que se generan son de distinto tamaño.

T(n-1) = T(n-2) +.... T(0)
T(n-2) = T(n-3) +     T(0)

Mochila continua con elementos reales.
	Solucion optima sera voraz. puedo tomar los elementos en funcion de la relacion valor/peso.

Mochila con pesos enteros: Viable por dinamica.
		0 1 2 3 4 5 6 7
	0
	1
	2          o      o
	3                 x


Mochila con pesos reales: No viable por dinamica.
		0.001 0.010 ... :(
	0
	1
	2
	3

Mochila Discreta (no se pueden fraccionar) => Programacion dinamica (con pesos enteros)
Mochila Continua (fraccionar) => Algoritmo voraz. (con pesos enteros o reales)
El problema del Cambio => Algoritmo voraz (no asegura ni factible)
Soluciones
	No factible => no cumple restricciones.
	Factible => que cumple las restricciones.
	Optima => de todas las soluciones la mejor.

Dijkstra => Voraz

Fibonaci => Dinamica

Combinaciones de n sobre r => Dinamica

El caminante => 	Dinamica optima. El numero de celdas que tiene el mapa NxM
									 El tamaño del almacen N+1 x M+1
					Almacen 2 vectores.

El problema de colocar las reinas => Backtracking

Prim, kruskal => grafo de recubrimiento minimo => Voraz
					
El viajante de comercio => Dinamica

Corte de tubos => Dinamica

Fontanero diligente => Voraz
Tareas => Voraz


