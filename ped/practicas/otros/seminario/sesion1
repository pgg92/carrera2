// viernes 3 Enero PED PRACTICA1 - SEMINARIO

*CLASES Y OBJETOS*
TCoordenada *ptrP3 = &objetoP1; => puntero apunta a la zona de direccion de objetoP1
	ptrP3 -> x (acceder a su x) <=> (*ptrP3).x (siempre que sea contenido poner los ())

funciones inline = Poner en el .h la implementacion

$ make
	g++ -c main.cc
	g++ -c tcoordenada.cc
	...
	
	
	COMP=g++ .... $(COMP) => uso etiquetas



*CONSTRUCTOR Y DESTRUCTOR*
Si no hacemos la forma canonica hace por defecto una (hace referencias, no duplica la memoria)

Constructor copia (3 formas de llamarlo)
1º)Lo invocas tu
	TComplejo a, c;
	TComplejo b(a); 
		Los reales e imaginarios son faciles
		para vectores memoria dinámica
	Destructor asignacion
	c = a; //destruir la izquierda y despues se copia

2º)se pasa un objeto por valor
	TComplejo
	TComplejo::operador+ (TComplejo x); // llama al constructor, trabajas con la copia
	TComplejo::operador+ (TComplejo &x); // no harias copia mas eficiente

3º) se devuelve un objeto por valor
	TComplejo & // devuelve por referencia
	TComplejo //llama al constructor copia
	TComplejo::operador+ (TCompleko x) {TComplejo salida; return salida;}

	si la variable es local, obligado a pasar por valor.
		local = se destruye al salir del ambito

Destructores
Si lo dejas por defecto puedes tener problemas con la memoria dinamica (no borrar todo)
Al salirse de ambito se ejecuta solo

	TComplejo a,b,c;
	a ~TComplejo();
	cout << a; // el destructor la libera (la vacia). La deja como el constructor lo haria
