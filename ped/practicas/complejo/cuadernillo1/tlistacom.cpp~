#include "tlistacom.h"
#include "tcomplejo.h"
#include <iostream>

using namespace std;

// TLISTANODO
TListaNodo::
TListaNodo()
{
	anterior = siguiente = NULL;
}

TListaNodo::
TListaNodo(const TListaNodo &n)
{
	anterior = n.anterior;
	siguiente = n.siguiente;
	e = n.e;
}
TListaNodo::
~TListaNodo()
{
	anterior = siguiente = NULL;
}
TListaNodo &TListaNodo::
operator=(const TListaNodo &n)
{
	if( this != &n )
	{
		e = n.e;
		siguiente = n.siguiente;
		anterior = n.anterior;	
	}
	
	return *this;
}

// TLISTAPOS
TListaPos::
TListaPos()
{
	pos = NULL;
}
TListaPos::
~TListaPos()
{
	pos = NULL;
}
TListaPos::
TListaPos(const TListaPos &p)
{
	pos = p.pos;
}
TListaPos TListaPos::
operator=(const TListaPos &p)
{
	pos = p.pos;
	return *this;
}
bool TListaPos::
operator==(const TListaPos &p) const
{	
	bool equals = false;
	if( pos == p.pos )
		equals = true;
	
	return equals;
}
bool TListaPos::
operator!=(const TListaPos &p) const
{
	bool distinc = false;
	if( pos != p.pos )
		distinc = true;
		
	return distinc;
}
TListaPos TListaPos:: 
Anterior() const
{
	TListaPos aux;
/*
	
	if( pos != (*this.Primera()) )
	{
		aux.pos = pos->anterior; 
	}

*/
	
	if(pos)
		aux.pos = pos->anterior;

	return aux;
}

TListaPos TListaPos::
Siguiente() const
{
	TListaPos aux;
	/*
	if( pos != (*this).Ultima() )
	{
		aux.pos = pos->siguiente;
	}
	*/
	
	if(pos)
		aux.pos = pos->siguiente;
	
	return aux;
}
bool TListaPos::
EsVacia() const
{
	return pos == NULL;
}


//TLISTACOM
TListaCom::
TListaCom()
{
	primero = ultimo = NULL;
}
TListaCom::
TListaCom(const TListaCom &l)
{
	primero = ultimo = NULL;
	*this = l;
}
TListaCom::
~TListaCom()
{
	TListaNodo *aux;
	
	aux = primero;
	while(primero != NULL)
	{
		primero = primero->siguiente;
		delete aux;
		aux = primero;
	}
	primero = ultimo = NULL;
}
TListaCom &TListaCom::
operator=(const TListaCom &l)
{

}
bool TListaCom::
operator==(const TListaCom &l) const
{
	bool equals = true;
	TListaNodo *aux, *laux;
	
	
	if( l.Longitud() == (*this).Longitud() )
	{
		aux = primero;
		laux = l.primero;
		while( aux != NULL && laux != NULL && equals == true )
		{
			if( aux->e != laux->e )
				equals = false;
			else
			{
				aux = aux->siguiente;
				laux = laux->siguiente;
			}
		}	
	}
	else
		equals = false;
	
	return equals;
}
bool TListaCom::
operator!=(const TListaCom &l) const
{
	return !(*this == l);
}

TListaCom TListaCom::
operator+(const TListaCom &l) const
{
	TListaNodo *daux;
	TListaCom nueva(*this);
	
	daux = ultimo;
	while( daux != NULL )
	{
		nueva.InsCabeza( daux->e );
		daux = daux->anterior;
	}
	
	return nueva;
}
TListaCom TListaCom:: 
operator-(const TListaCom &l) const
{
	TListaNodo *aux;
	TListaCom nueva;
	
	aux = ultimo;
	while( aux != NULL )
	{
		if( !l.Buscar(aux->e) )
			nueva.InsCabeza( aux->e );
		else
			aux = aux->siguiente;
	}
	
	return nueva;
}
bool TListaCom::
EsVacia() const
{
	return primero == ultimo && primero == NULL;
}
bool TListaCom::
InsCabeza(const TComplejo &)
{
	
}
bool TListaCom::
InsertarI(const TComplejo &, const TListaPos &)
{

}
bool TListaCom::
InsertarD(const TComplejo &, const TListaPos &)
{

}
bool TListaCom::
Borrar(const TComplejo &)
{

}
bool TListaCom::
BorrarTodos(const TComplejo &)
{

}
bool TListaCom::
Borrar(TListaPos &)
{
	
}
TComplejo TListaCom::
Obtener(const TListaPos &p) const
{
	bool encontrado;
	TComplejo caux;
	TListaNodo *naux;

	encontrado = false;
	naux = primero;
	while( naux != NULL && encontrado == false )
	{
		if( naux == p.pos )
			encontrado = true;
		else
			naux = naux->siguiente;
	}
	if( encontrado == true )
		caux = naux->e;
	
	return caux;
}
bool TListaCom::
Buscar(const TComplejo &c) const
{
	bool find = false;
	TListaNodo *aux;
	
	aux = primero;
	while( aux != NULL && find == false )
	{
		if( aux->e == c )
			find = true;
		aux = aux->siguiente;
	}
	
	return find;
}
int TListaCom:: 
Longitud() const
{
	int nodos = 0;
	TListaNodo *aux;
	
	aux = primero;
	while(aux != NULL)
	{
		aux = aux->siguiente;
		nodos++;
	}
	
	return nodos;
}
TListaPos TListaCom::
Primera() const
{
	TListaPos aux;
	aux.pos = primero;
	return aux;
}
TListaPos TListaCom::
Ultima() const
{
	TListaPos aux;
	aux.pos = ultimo;
	return aux;
}
ostream &operator<<(ostream &,const TListaCom &)
{

}



















