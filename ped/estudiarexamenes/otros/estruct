#lang r6rs
(import (rnrs base)
        (rnrs io simple)
        (rnrs lists (6))
        (schemeunit))


(define (hoja? dato)
   (not (list? dato)))
(define (plana? lista)
   (or (null? lista)
       (and (hoja? (car lista))
            (plana? (cdr lista)))))
(define (estructurada? lista)
   (if (null? lista)
      #f
      (or (list? (car lista))
          (estructurada? (cdr lista)))))

(define (buscar lista x)
  (cond
    ((null? lista) #f)
    ((hoja? lista) (equal? lista x))
    (else (or
           (buscar (car lista) x)
           (buscar (cdr lista) x)))))

(define (sumar lista)
  (cond
   ((null? lista) 0)
   ((hoja? lista) lista)
   (else (+
          (sumar(car lista))
          (sumar(cdr lista))))))

(define (decrementarp lista)
  (cond
    ((null? lista) '())
    ((hoja? lista) (- lista 1))
    (else (append
           (decrementarp (car lista))
           (decrementarp (cdr lista))))))

(define (sumarpb lista nivelminimo)
  (cond
    ( (null? lista) 0 )
    ( (and (hoja? lista) (< nivelminimo 0)) lista )
    ( (and (hoja? lista) (>= nivelminimo 0)) 0 )
    (else (+ (sumarpb (car lista) (- nivelminimo 1))
             (sumarpb (cdr lista) nivelminimo)))
))

(define (sumar-fos lista)
  (fold-right + 0
              (map (lambda(x)
                     (if (hoja? x)
                         x
                         (sumar-fos x))) lista)))

;sumar todas las hojas del nivel i
(define (sumar-niveles-i-fos lista i)
  (fold-right + 0
              (map (lambda(x)
                (cond
                  ( (and (hoja? x) (= i 0)) x)
                  (sumar-niveles-i-fos x (- i 1)))) lista)))  